// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO
    "Profiles" (
        "username",
        "password",
        "profilePicture",
        "bio"
    )
VALUES
    (?, ?, ?, ?) RETURNING profileID, username, password, profilePicture, bio, friends, weekplan
`

type CreateProfileParams struct {
	Username       string
	Password       string
	ProfilePicture []byte
	Bio            sql.NullString
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.Username,
		arg.Password,
		arg.ProfilePicture,
		arg.Bio,
	)
	var i Profiles
	err := row.Scan(
		&i.ProfileID,
		&i.Username,
		&i.Password,
		&i.ProfilePicture,
		&i.Bio,
		&i.Friends,
		&i.Weekplan,
	)
	return i, err
}

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO
    "Recipes" (
        "recipeName",
        "recipePicture",
        "timeEstimate",
        "difficulty",
        "feedsPeople",
        "ingredients",
        "directions"
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?) RETURNING recipeID, recipeName, recipePicture, timeEstimate, difficulty, feedsPeople, ingredients, directions, author
`

type CreateRecipeParams struct {
	RecipeName    string
	RecipePicture []byte
	TimeEstimate  sql.NullInt64
	Difficulty    sql.NullString
	FeedsPeople   sql.NullInt64
	Ingredients   string
	Directions    string
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipes, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.RecipeName,
		arg.RecipePicture,
		arg.TimeEstimate,
		arg.Difficulty,
		arg.FeedsPeople,
		arg.Ingredients,
		arg.Directions,
	)
	var i Recipes
	err := row.Scan(
		&i.RecipeID,
		&i.RecipeName,
		&i.RecipePicture,
		&i.TimeEstimate,
		&i.Difficulty,
		&i.FeedsPeople,
		&i.Ingredients,
		&i.Directions,
		&i.Author,
	)
	return i, err
}

const createRecipeCollection = `-- name: CreateRecipeCollection :one
INSERT INTO
    "RecipeCollection" (
        "recipeCollectionName",
        "date"
    )
VALUES
    (?, ?) RETURNING recipeCollectionID, recipeCollectionName, recipeID, ownerID, date, subscriberID
`

type CreateRecipeCollectionParams struct {
	RecipeCollectionName string
	Date                 sql.NullString
}

func (q *Queries) CreateRecipeCollection(ctx context.Context, arg CreateRecipeCollectionParams) (RecipeCollection, error) {
	row := q.db.QueryRowContext(ctx, createRecipeCollection, arg.RecipeCollectionName, arg.Date)
	var i RecipeCollection
	err := row.Scan(
		&i.RecipeCollectionID,
		&i.RecipeCollectionName,
		&i.RecipeID,
		&i.OwnerID,
		&i.Date,
		&i.SubscriberID,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM
    "Profiles"
WHERE
    "profileID" = ?
`

func (q *Queries) DeleteProfile(ctx context.Context, profileid int64) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, profileid)
	return err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM
    "Recipes"
WHERE
    "recipeID" = ?
`

func (q *Queries) DeleteRecipe(ctx context.Context, recipeid int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, recipeid)
	return err
}

const deleteRecipeCollection = `-- name: DeleteRecipeCollection :exec
DELETE FROM
    "RecipeCollection"
WHERE
    "recipeCollectionID" = ?
`

func (q *Queries) DeleteRecipeCollection(ctx context.Context, recipecollectionid int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipeCollection, recipecollectionid)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT
    profileID, username, password, profilePicture, bio, friends, weekplan
FROM
    "Profiles"
WHERE
    "profileID" = ?
LIMIT
    1
`

// --------PROFILES------------
func (q *Queries) GetProfile(ctx context.Context, profileid int64) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, getProfile, profileid)
	var i Profiles
	err := row.Scan(
		&i.ProfileID,
		&i.Username,
		&i.Password,
		&i.ProfilePicture,
		&i.Bio,
		&i.Friends,
		&i.Weekplan,
	)
	return i, err
}

const getRecipe = `-- name: GetRecipe :one
SELECT
    recipeID, recipeName, recipePicture, timeEstimate, difficulty, feedsPeople, ingredients, directions, author
FROM
    "Recipes"
WHERE
    "recipeID" = ?
LIMIT
    1
`

// ---------RECIPE------------
func (q *Queries) GetRecipe(ctx context.Context, recipeid int64) (Recipes, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, recipeid)
	var i Recipes
	err := row.Scan(
		&i.RecipeID,
		&i.RecipeName,
		&i.RecipePicture,
		&i.TimeEstimate,
		&i.Difficulty,
		&i.FeedsPeople,
		&i.Ingredients,
		&i.Directions,
		&i.Author,
	)
	return i, err
}

const getRecipeCollection = `-- name: GetRecipeCollection :one
SELECT
    recipeCollectionID, recipeCollectionName, recipeID, ownerID, date, subscriberID
FROM
    "RecipeCollection"
WHERE
    "recipeCollectionID" = ?
LIMIT
    1
`

// -----RECIPECOLLECTION-------
func (q *Queries) GetRecipeCollection(ctx context.Context, recipecollectionid int64) (RecipeCollection, error) {
	row := q.db.QueryRowContext(ctx, getRecipeCollection, recipecollectionid)
	var i RecipeCollection
	err := row.Scan(
		&i.RecipeCollectionID,
		&i.RecipeCollectionName,
		&i.RecipeID,
		&i.OwnerID,
		&i.Date,
		&i.SubscriberID,
	)
	return i, err
}

const listProfiles = `-- name: ListProfiles :many
SELECT
    profileID, username, password, profilePicture, bio, friends, weekplan
FROM
    "Profiles"
ORDER BY
    "username"
`

func (q *Queries) ListProfiles(ctx context.Context) ([]Profiles, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profiles
	for rows.Next() {
		var i Profiles
		if err := rows.Scan(
			&i.ProfileID,
			&i.Username,
			&i.Password,
			&i.ProfilePicture,
			&i.Bio,
			&i.Friends,
			&i.Weekplan,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipeCollection = `-- name: ListRecipeCollection :many
SELECT
    recipeCollectionID, recipeCollectionName, recipeID, ownerID, date, subscriberID
FROM
    "RecipeCollection"
ORDER BY
    "recipeCollectionName"
`

func (q *Queries) ListRecipeCollection(ctx context.Context) ([]RecipeCollection, error) {
	rows, err := q.db.QueryContext(ctx, listRecipeCollection)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeCollection
	for rows.Next() {
		var i RecipeCollection
		if err := rows.Scan(
			&i.RecipeCollectionID,
			&i.RecipeCollectionName,
			&i.RecipeID,
			&i.OwnerID,
			&i.Date,
			&i.SubscriberID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipes = `-- name: ListRecipes :many
SELECT
    recipeID, recipeName, recipePicture, timeEstimate, difficulty, feedsPeople, ingredients, directions, author
FROM
    "Recipes"
ORDER BY
    "recipeName"
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipes, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipes
	for rows.Next() {
		var i Recipes
		if err := rows.Scan(
			&i.RecipeID,
			&i.RecipeName,
			&i.RecipePicture,
			&i.TimeEstimate,
			&i.Difficulty,
			&i.FeedsPeople,
			&i.Ingredients,
			&i.Directions,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE
    "Profiles"
set
    "username" = ?,
    "password" = ?,
    "profilePicture" = ?,
    "bio" = ?,
    "friends" = ?,
    "weekplan" = ?
WHERE
    "profileID" = ? RETURNING profileID, username, password, profilePicture, bio, friends, weekplan
`

type UpdateProfileParams struct {
	Username       string
	Password       string
	ProfilePicture []byte
	Bio            sql.NullString
	Friends        sql.NullInt64
	Weekplan       sql.NullInt64
	ProfileID      int64
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profiles, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.Username,
		arg.Password,
		arg.ProfilePicture,
		arg.Bio,
		arg.Friends,
		arg.Weekplan,
		arg.ProfileID,
	)
	var i Profiles
	err := row.Scan(
		&i.ProfileID,
		&i.Username,
		&i.Password,
		&i.ProfilePicture,
		&i.Bio,
		&i.Friends,
		&i.Weekplan,
	)
	return i, err
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE
    "Recipes"
set
    "recipeName" = ?,
    "recipePicture" = ?,
    "timeEstimate" = ?,
    "difficulty" = ?,
    "feedsPeople" = ?,
    "ingredients" = ?,
    "directions" = ?
WHERE
    "recipeID" = ? RETURNING recipeID, recipeName, recipePicture, timeEstimate, difficulty, feedsPeople, ingredients, directions, author
`

type UpdateRecipeParams struct {
	RecipeName    string
	RecipePicture []byte
	TimeEstimate  sql.NullInt64
	Difficulty    sql.NullString
	FeedsPeople   sql.NullInt64
	Ingredients   string
	Directions    string
	RecipeID      int64
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipes, error) {
	row := q.db.QueryRowContext(ctx, updateRecipe,
		arg.RecipeName,
		arg.RecipePicture,
		arg.TimeEstimate,
		arg.Difficulty,
		arg.FeedsPeople,
		arg.Ingredients,
		arg.Directions,
		arg.RecipeID,
	)
	var i Recipes
	err := row.Scan(
		&i.RecipeID,
		&i.RecipeName,
		&i.RecipePicture,
		&i.TimeEstimate,
		&i.Difficulty,
		&i.FeedsPeople,
		&i.Ingredients,
		&i.Directions,
		&i.Author,
	)
	return i, err
}

const updateRecipeCollection = `-- name: UpdateRecipeCollection :one
UPDATE
    "RecipeCollection"
set
    "recipeCollectionName" = ?,
    "date" = ?,
    "subscriberID" = ?
WHERE
    "recipeCollectionID" = ? RETURNING recipeCollectionID, recipeCollectionName, recipeID, ownerID, date, subscriberID
`

type UpdateRecipeCollectionParams struct {
	RecipeCollectionName string
	Date                 sql.NullString
	SubscriberID         sql.NullInt64
	RecipeCollectionID   int64
}

func (q *Queries) UpdateRecipeCollection(ctx context.Context, arg UpdateRecipeCollectionParams) (RecipeCollection, error) {
	row := q.db.QueryRowContext(ctx, updateRecipeCollection,
		arg.RecipeCollectionName,
		arg.Date,
		arg.SubscriberID,
		arg.RecipeCollectionID,
	)
	var i RecipeCollection
	err := row.Scan(
		&i.RecipeCollectionID,
		&i.RecipeCollectionName,
		&i.RecipeID,
		&i.OwnerID,
		&i.Date,
		&i.SubscriberID,
	)
	return i, err
}
